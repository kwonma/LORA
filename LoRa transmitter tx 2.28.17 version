/* Author: Marissa Kwon
  Date: 2/28/2017
  Last Updated: 08/04/2107
  Description: Code for "Transmitter" LoRa radio breakout; initilizes
  LoRa radio transmitter and sends data to LoRa receiver on the same
  frequency.
  ** This is an older version of our LoRa code that uses character 
     arrays to send messages - will update this LoRa code so that 
     data is stored using strings
     
  This code originated from Adafruit's website at
  https://learn.adafruit.com/adafruit-rfm69hcw-and-rfm96-rfm95-rfm98-lora-packet-padio-breakouts/rfm9x-test
  and has been adjusted for use in the Internet of Agriculture project.
  URSA Engage Student Research at OPEnS Lab at Oregon State
  University.
*/
// LoRa 9x_TX
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messaging client(transmitter)
// with the RH_RF95 class. RH_RF95 class does not provide for addressing or
// reliability, so you should only use RH_RF95 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example LoRa9x_RX

#include <SPI.h>
#include <RH_RF95.h>
#include "HX711.h"
#include "LowPower.h"
#include "RTClibExtended.h"
#define RFM95_CS 10
#define RFM95_RST 9
#define RFM95_INT 3

//super validator calibration variable
#define calibration_factor -890 //This value is obtained using the Calibration sketch (grams)

//load cell variables
#define DOUT A4 //connecting the out and clock pins for the load cell
#define CLK A5

//load cell initialization
  HX711 scale(DOUT, CLK);
  
// Change to 434.0 or other frequency, must match RX's freq!
#define RF95_FREQ 915.0

// Singleton instance of the radio driver
  RH_RF95 rf95(RFM95_CS, RFM95_INT);

//packet length for radiopacket array
  int16_t packet_len = 0;

//initialize transmitter id
  int16_t my_id = 100;

void setup()
{
  
  //LoRa transmission
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);
  Serial.begin(9600);
  while (!Serial); // waits for serial hardware to start up
  
  //report all sensors present on system
  Serial.println("Arduino LoRa TX Test!");
  Serial.println("HX711 scale");
  
  //manually reset LoRa
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);
  while (!rf95.init()) {
    Serial.println("LoRa radio init failed"); //if print wiring may be wrong
    while (1);
  }
  Serial.println("LoRa radio init OK!");
  // checks if frequency is initialized
  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1);
  }
  Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);
  
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips / symbol, CRC on
       // The default transmitter power is 13dBm, using PA_BOOST.
       // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
       // you can set transmitter powers from 5 to 23 dBm:
       rf95.setTxPower(23, false);
       
  // load cell calibration     
  scale.set_scale(calibration_factor); //This value is obtained by using the Calibration sketch
  scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0
  Serial.println("Readings:");

  //temp init?
  
  //humidity init?

  //SD init?
}

void loop() {
  // Enter into Low Power mode here[RTC]:
  
  // Arduino Wakes up here[RTC]
  
      //load cell data:
      Serial.print("Reading..."); //You can change this to kg but you'll need to refactor the calibration_factor
      int16_t cell_data = (scale.get_units() * 10000); //scale.get_units() returns a float. The 4 after the comma tells the function to print 4 decimals.
      Serial.println(cell_data); //verify changed measurement
      Serial.println("Sending to rf95_server");
  
      //temperature data:
  
      //humidity data:

      //saves all this to an SD card later on
  
  // Send a message to rf95_server
  // We want each different radio packet to send a uniqe X digit id first and then send other sensor info:
  
  // add radiopacket ID ###  
  // LOAD CELL [grams, 7 digits max, 4 decimal places precision]
  // TEMP [degrees, 5 digits max, 2 decimal precision]
  // HUMIDITY [percentage, 5 digits max, 2 decimal precision]
  // radiopacket info: ID/LOAD CELL/TEMP/HUMIDITY
  // _ _ _ , _ _ _ _ _ _ _ , _ _ _ _ _ , _ _ _ _ _ ,
  // total size: 24 characters
  
  char radiopacket[24] = "";
 
  packet_len = sizeof(radiopacket);
 
  //adds the decimal charcters for ID# after radiopacket[3]
  itoa(my_id, radiopacket, 10);
  radiopacket[3] = ',';
  
  //adds the decimal charcters for LOAD CELL after radiopacket[6]
  itoa(cell_data, radiopacket+4, 10);
  radiopacket[11] = ',';

  //adds the decimal charcters for TEMPERATURE after radiopacket[19]
  //itoa(temp_data, radiopacket + 12, 10);
   radiopacket[17] = ',';

  //adds the decimal charcters for HUMIDITY after radiopacket[24]
  //itoa(hum_data, radiopacket + 18, 10);
    radiopacket[23] = ',';

  // -- last value needs to have comma delimiter at the end of the array for reciever to work
  //can add more sensor data as the decimal charcters after radiopacket[24]

 
  Serial.print("Sending "); Serial.println(radiopacket);
  // sets the last array value to '\0'
  // why integer 0 not '\0'?
  uint8_t lenRadioPacketEnd = packet_len - 1;
  radiopacket[lenRadioPacketEnd] = '\0';
  // sends data to receiver at this time
  Serial.println("Sending value..."); //delay(10);
  if (packet_len > 0)
  {
    rf95.send((uint8_t *)radiopacket, packet_len); // typecasts radiopacket back to binary
  }
  Serial.println("Waiting for packet to complete..."); //delay(10);
  rf95.waitPacketSent();
  // Now wait for a reply
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];

  uint8_t len = sizeof(buf);
  // following codeexecutes after all receiver code runs
  if (rf95.waitAvailableTimeout(1000))
  {
    // Should be a reply message for us now
    if (rf95.recv(buf, &len))
    {
      Serial.println("Got reply: ");
      Serial.println("\nData received:");
      Serial.println((char*)buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC); // prints RSSI as decimal value
      Serial.println();
    }
    else //happens when there is a receiver but bad message
    {
      Serial.println("Receive failed");
    }
  }
  else //happens when there is no receiver on the same freq to listen to
  {
    Serial.println("No reply, is there a listener around?");
  }
  //delay(10);
}
